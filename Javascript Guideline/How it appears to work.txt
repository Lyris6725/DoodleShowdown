-- gamesModel.js --

class Player appears to be a "constructor" where we get everything we need from the player
and export it
how does it seem to know wtf it's calling, no idea

-- playsModel.js --

this is gonna need some slight updates when we have the units but we need to implement them first
to be able to do this correctly

it seems the async's in the playsModel are being called on the gameRequests

-- gameRequests.js --

as the name sugests this should be for game requests but how it knows what it should call makes 0 sense
the api is even more confusing 

but what it seems is you get /api as a standard
then if it's something that happens in the turn or while the game is ongoing it's /plays

if it's to end the game it's /games

there is an authorization layer so after that would be /auth aka /api/games/auth/close

the close here is what you want to call it I am not sure if there's anything important around their names
besides making sense (within JS limits)

-- actions.js --

for some reason actions also has functions

added comments to the code but besides that we prob need to add the click bs

-- gameInfo.js --

this seems to be where everything is stored, so anything you want to show gets defined here
so you create the buttons and stuff there and when they should be shown or not

there's a lot of GameInfo. stuff and I'm not sure how it works but it seems to be stuff you've defined
in the file already or literally just stuff from the database

-- gamelib.js -- 
this appears to be where stuff is actually made visible to the player

-- game.html -- 
just appears to be where you call every script??

-- index.html --
appears to be the login page

-- matches.html --

appears to be the match selection screen

-- register.html --
appears to be the register screen

-- waiting.html -- 
appears to be the waiting room after selecting create match

-- gamesRoutes.js --

apparently we always need this auth.verifyAuth
appears to get everything authenticated 

it's extremely confusing since I'm not sure when you need the full api path or not but what can ya do

-- playsRoutes.js --

these seem to be the routes for when you're actually playing

-- usersRoutes --

probably not going to touch

-- index.js --
I'm not really sure but it seems here is where we say where the routes connect to stuff and how the 
api/ should work and where it should go